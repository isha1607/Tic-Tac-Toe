# -*- coding: utf-8 -*-
"""CC3600ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xtgSD0cGDicTn2gQ2LTuZR3KU0hJMTTp
"""

import cv2
import numpy as np
import tensorflow as tf

# Load YOLO
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

def detect_objects(image):
    height, width, channels = image.shape
    blob = cv2.dnn.blobFromImage(image, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)

    class_ids = []
    confidences = []
    boxes = []

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5:
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                x = int(center_x - w / 2)
                y = int(center_y - h / 2)

                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    result_boxes = []
    for i in range(len(boxes)):
        if i in indexes:
            box = boxes[i]
            result_boxes.append((class_ids[i], confidences[i], box))
    return result_boxes

def draw_labels(image, result_boxes):
    for class_id, confidence, box in result_boxes:
        x, y, w, h = box
        label = str(classes[class_id])
        color = (0, 255, 0)
        cv2.rectangle(image, (x, y), (x + w, y + h), color, 2)
        cv2.putText(image, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
    return image

# Function to process video stream
def process_video(video_path):
    cap = cv2.VideoCapture(video_path)
    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break
        result_boxes = detect_objects(frame)
        frame = draw_labels(frame, result_boxes)
        cv2.imshow('Object Detection', frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cap.release()
    cv2.destroyAllWindows()

# Detect objects in an image
image_path = 'path_to_your_image.jpg'
image = cv2.imread(image_path)
result_boxes = detect_objects(image)
image = draw_labels(image, result_boxes)
cv2.imshow("Image", image)
cv2.waitKey(0)
cv2.destroyAllWindows()

# Detect objects in a video
video_path = 'path_to_your_video.mp4'
process_video(video_path)