# -*- coding: utf-8 -*-
"""CC3599.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VIkANUIqYh9istB2z2XWxDw32nOW-fza
"""

# Importing necessary libraries
import numpy as np

# Function to initialize the board
def init_board():
    return np.full((3, 3), ' ')

# Function to display the board
def display_board(board):
    for row in board:
        print("|".join(row))
        print("-" * 5)

# Function to check for a win
def check_win(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([cell == player for cell in board[i, :]]):
            return True
        if all([cell == player for cell in board[:, i]]):
            return True
    if all([board[i, i] == player for i in range(3)]) or all([board[i, 2-i] == player for i in range(3)]):
        return True
    return False

# Function to check for a draw
def check_draw(board):
    return all([cell != ' ' for row in board for cell in row])

# Function to validate a move
def valid_move(board, row, col):
    return board[row, col] == ' '

# Function for the AI to make a move using a simple strategy
def ai_move(board):
    # Check if AI can win in the next move
    for i in range(3):
        for j in range(3):
            if board[i, j] == ' ':
                board[i, j] = 'O'
                if check_win(board, 'O'):
                    return
                else:
                    board[i, j] = ' '

    # Block player's winning move
    for i in range(3):
        for j in range(3):
            if board[i, j] == ' ':
                board[i, j] = 'X'
                if check_win(board, 'X'):
                    board[i, j] = 'O'
                    return
                else:
                    board[i, j] = ' '

    # Take the center if available
    if board[1, 1] == ' ':
        board[1, 1] = 'O'
        return

    # Take any corner if available
    for i, j in [(0, 0), (0, 2), (2, 0), (2, 2)]:
        if board[i, j] == ' ':
            board[i, j] = 'O'
            return

    # Take any remaining empty spot
    for i in range(3):
        for j in range(3):
            if board[i, j] == ' ':
                board[i, j] = 'O'
                return

# Main game loop
def play_game():
    board = init_board()
    while True:
        display_board(board)

        # User's move
        row, col = map(int, input("Enter your move (row and column): ").split())
        if valid_move(board, row, col):
            board[row, col] = 'X'
        else:
            print("Invalid move! Try again.")
            continue

        if check_win(board, 'X'):
            display_board(board)
            print("Congratulations! You win!")
            break
        if check_draw(board):
            display_board(board)
            print("It's a draw!")
            break

        # AI's move
        ai_move(board)
        if check_win(board, 'O'):
            display_board(board)
            print("AI wins! Better luck next time.")
            break
        if check_draw(board):
            display_board(board)
            print("It's a draw!")
            break

# Start the game
play_game()

